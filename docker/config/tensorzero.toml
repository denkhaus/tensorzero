# ┌────────────────────────────────────────────────────────────────────────────┐
# │                                  GENERAL                                   │
# └────────────────────────────────────────────────────────────────────────────┘

[gateway]
bind_address = "0.0.0.0:3000"

# ┌────────────────────────────────────────────────────────────────────────────┐
# │                                   MODELS                                   │
# └────────────────────────────────────────────────────────────────────────────┘

[models."gpt-3.5-turbo"]
routing = ["openrouter"]

[models."gpt-3.5-turbo".providers.openrouter]
type = "openrouter"
model_name = "openai/gpt-3.5-turbo"

[models.claude-3-haiku-20240307]
routing = ["openrouter"]

[models.claude-3-haiku-20240307.providers.openrouter]
type = "openrouter"
model_name = "anthropic/claude-3-haiku-20240307"

# ┌────────────────────────────────────────────────────────────────────────────┐
# │                                  GATEWAY                                   │
# └────────────────────────────────────────────────────────────────────────────┘

[gateway.template_filesystem_access]
enabled = true

# ┌────────────────────────────────────────────────────────────────────────────┐
# │                              EMBEDDING MODELS                              │
# └────────────────────────────────────────────────────────────────────────────┘

[embedding_models.nomic-embed-text]
routing = ["ollama"]

[embedding_models.nomic-embed-text.providers.ollama]
type = "openai"
model_name = "nomic-embed-text"
api_base = "http://host.docker.internal:11434/v1"


# ┌────────────────────────────────────────────────────────────────────────────┐
# │                                 FUNCTIONS                                  │
# └────────────────────────────────────────────────────────────────────────────┘

[functions.generate_draft]
type = "chat"
system_schema = "functions/generate_draft/system_schema.json"

[functions.generate_draft.variants.openai_promptA]
type = "chat_completion"
weight = 0.9
model = "openrouter::openai/gpt-3.5-turbo"
system_template = "functions/generate_draft/promptA/system_template.minijinja"

[functions.generate_draft.variants.openai_promptB]
type = "chat_completion"
weight = 0.1
model = "openrouter::openai/gpt-3.5-turbo"
system_template = "functions/generate_draft/promptB/system_template.minijinja"

[functions.json_with_schemas]
type = "json"
system_schema = "functions/json_with_schemas/system_schema.json"
output_schema = "functions/json_with_schemas/output_schema.json"

[functions.json_with_schemas.variants.openai_promptA]
type = "chat_completion"
weight = 0.9
model = "openrouter::openai/gpt-3.5-turbo"
system_template = "functions/json_with_schemas/promptA/system_template.minijinja"
json_mode = "implicit_tool"

[functions.json_with_schemas.variants.openai_promptB]
type = "chat_completion"
weight = 0.1
model = "openrouter::openai/gpt-3.5-turbo"
system_template = "functions/json_with_schemas/promptB/system_template.minijinja"

[functions.weather_helper]
type = "chat"
tools = ["get_temperature"]
tool_choice = { specific = "get_temperature" }

[functions.weather_helper.variants.openai_promptA]
type = "chat_completion"
weight = 1.0
model = "openrouter::openai/gpt-3.5-turbo"

[functions.templates_without_variables_chat]
type = "chat"

[functions.templates_without_variables_chat.variants.variant_without_templates]
type = "chat_completion"
weight = 1.0
model = "openrouter::openai/gpt-3.5-turbo"
system_template = "functions/templates_without_variables/variant_without_templates/system_template.minijinja"
user_template = "functions/templates_without_variables/variant_without_templates/user_template.minijinja"
assistant_template = "functions/templates_without_variables/variant_without_templates/assistant_template.minijinja"

[functions.templates_with_variables_chat]
type = "chat"
system_schema = "functions/templates_with_variables/system_schema.json"
user_schema = "functions/templates_with_variables/user_schema.json"
assistant_schema = "functions/templates_with_variables/assistant_schema.json"

[functions.templates_with_variables_chat.variants.variant_with_variables]
type = "chat_completion"
weight = 1.0
model = "openrouter::openai/gpt-3.5-turbo"
system_template = "functions/templates_with_variables/variant_with_variables/system_template.minijinja"
user_template = "functions/templates_with_variables/variant_with_variables/user_template.minijinja"
assistant_template = "functions/templates_with_variables/variant_with_variables/assistant_template.minijinja"

[functions.templates_with_variables_chat.variants.best_of_n]
type = "experimental_best_of_n_sampling"
weight = 1.0
candidates = ["variant_with_variables", "variant_with_variables"]

[functions.templates_with_variables_chat.variants.best_of_n.evaluator]
model = "openrouter::openai/gpt-3.5-turbo"
system_template = "functions/templates_with_variables/variant_with_variables/system_template.minijinja"
user_template = "functions/templates_with_variables/variant_with_variables/user_template.minijinja"
assistant_template = "functions/templates_with_variables/variant_with_variables/assistant_template.minijinja"

[functions.templates_without_variables_json]
type = "json"
output_schema = "functions/json_with_schemas/output_schema.json"

[functions.templates_without_variables_json.variants.variant_without_templates]
type = "chat_completion"
weight = 1.0
model = "openrouter::openai/gpt-3.5-turbo"
system_template = "functions/templates_without_variables/variant_without_templates/system_template.minijinja"
user_template = "functions/templates_without_variables/variant_without_templates/user_template.minijinja"
assistant_template = "functions/templates_without_variables/variant_without_templates/assistant_template.minijinja"

[functions.templates_with_variables_json]
type = "json"
system_schema = "functions/templates_with_variables/system_schema.json"
user_schema = "functions/templates_with_variables/user_schema.json"
assistant_schema = "functions/templates_with_variables/assistant_schema.json"
output_schema = "functions/json_with_schemas/output_schema.json"

[functions.templates_with_variables_json.variants.variant_with_variables]
type = "chat_completion"
model = "openrouter::openai/gpt-3.5-turbo"
system_template = "functions/templates_with_variables/variant_with_variables/system_template.minijinja"
user_template = "functions/templates_with_variables/variant_with_variables/user_template.minijinja"
assistant_template = "functions/templates_with_variables/variant_with_variables/assistant_template.minijinja"

# ┌────────────────────────────────────────────────────────────────────────────┐
# │                                  METRICS                                   │
# └────────────────────────────────────────────────────────────────────────────┘

[metrics.task_success]
type = "boolean"
optimize = "max"
level = "inference"

[metrics.user_rating]
type = "float"
optimize = "max"
level = "episode"

# ┌────────────────────────────────────────────────────────────────────────────┐
# │                                   TOOLS                                    │
# └────────────────────────────────────────────────────────────────────────────┘
[tools.get_temperature]
description = "Get the weather for a given location"
parameters = "tools/get_temperature.json"

# ┌────────────────────────────────────────────────────────────────────────────┐
# │                                EVALUATIONS                                 │
# └────────────────────────────────────────────────────────────────────────────┘

[evaluations.evaluation1]
type = "static"
dataset_name = "dataset1"
function_name = "generate_draft"

[evaluations.evaluation1.evaluators.em_evaluator]
type = "exact_match"

[evaluations.evaluation1.evaluators.llm_judge_bool]
type = "llm_judge"
output_type = "boolean"
optimize = "min"

[evaluations.evaluation1.evaluators.llm_judge_bool.variants.anthropic_promptA]
type = "chat_completion"
active = true
model = "anthropic::claude-3.5-sonnet"
system_instructions = "evaluations/evaluation1/llm_judge_bool/system_instructions.txt"
json_mode = "implicit_tool"

[evaluations.evaluation1.evaluators.llm_judge_float]
type = "llm_judge"
output_type = "float"
optimize = "min"
include = { reference_output = true }

[evaluations.evaluation1.evaluators.llm_judge_float.variants.anthropic_promptA]
type = "chat_completion"
active = true
json_mode = "implicit_tool"
model = "anthropic::claude-3.5-sonnet"
system_instructions = "evaluations/evaluation1/llm_judge_float/system_instructions.txt"

# Test functions for OpenAI compatibility tests
[functions.basic_test]
type = "chat"
system_schema = "functions/basic_test/system_schema.json"

[functions.basic_test.variants.test]
type = "chat_completion"
model = "openrouter::openai/gpt-3.5-turbo"
system_template = "functions/basic_test/prompt/system_template.minijinja"

[functions.json_success]
type = "json"
output_schema = "functions/json_with_schemas/output_schema.json"

[functions.json_success.variants.test]
type = "chat_completion"
model = "openrouter::openai/gpt-3.5-turbo"
json_mode = "strict"

[functions.json_fail]
type = "json"
output_schema = "functions/json_with_schemas/output_schema.json"

[functions.json_fail.variants.test]
type = "chat_completion"
model = "openrouter::openai/gpt-3.5-turbo"
json_mode = "strict"

[functions.null_chat]
type = "chat"

[functions.null_chat.variants.test]
type = "chat_completion"
model = "openrouter::openai/gpt-3.5-turbo"

[functions.null_json]
type = "json"
output_schema = "functions/json_with_schemas/output_schema.json"

[functions.null_json.variants.test]
type = "chat_completion"
model = "openrouter::openai/gpt-3.5-turbo"
json_mode = "strict"

[functions.weather_helper_parallel]
type = "chat"
tools = ["get_temperature"]
tool_choice = { specific = "get_temperature" }

[functions.weather_helper_parallel.variants.test]
type = "chat_completion"
model = "openrouter::openai/gpt-3.5-turbo"

# Object storage configuration for image tests
[object_storage]
type = "disabled"

# Functions from dataset fixtures
[functions.write_haiku]
type = "chat"

[functions.write_haiku.variants.test]
type = "chat_completion"
model = "openrouter::openai/gpt-3.5-turbo"

[functions.extract_entities]
type = "json"
output_schema = "functions/json_with_schemas/output_schema.json"

[functions.extract_entities.variants.test]
type = "chat_completion"
model = "openrouter::openai/gpt-3.5-turbo"
json_mode = "strict"
